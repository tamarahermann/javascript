'number' + 3 + 3   в результаті будемо мати стрінгове значення "number33", оскільки оператор додавання конкатинує 
значення в стрінгу, якщо хоча б один із доданків є стрінгою.

null + 3   в результаті будемо мати 3, оскільки null в операції додавання прирівнюється до цифри 0.

5 && "qwerty"  в результаті отримаємо "qwerty", оскільки в даному прикладі 5 є правдивим операндом, а оператор && повертає 
значення другого операнда у випадку, якщо перший є правдивим.

+'40' + +'2' + "hillel"   в результаті отримаємо "hillel42", оскільки в джаваскріпт знак плюса перед стрінгою, що містить числове 
значення перетворює цю стрінгу у буквальне число і потім відбувається операція додавання двох чисел (40+2=42) 
і далі сума цих чисел вже конкатинується зі стрінгою "hillel".

'10' - 5 === 6   в результаті буде поветатися FALSE, оскільки стрінга '10' в даному випадку прирівнюється до числа 10,
а 10 - 5 строго рівно числу 5, а не числу 6, тому буде FALSE, 
оскільки позначення === означає "строго дорівнює".

true + false  в результаті дає 1, оскільки при додаванні булієвих операторів у джаваскріпт true інтерпритується як 1,
а false інтерпритується як 0, а отже: 1+0=1.

'4px' - 3  в результаті отримаємо NaN (Not a number), бо в першій стрінзі окрім четвірки є ще буквенні символи і відповідно 
джаваскріпт не може перетворити цю стрінгу у числове значення для виконання подальшої математичної операції віднімання,
тому і буде повертати результат NaN щодо першої стрінги, 
а відповідно і вся операція NaN - 3 не матиме сенсу і буде повертати значення NaN. 

'4' - 3  в результаті буде 1, оскільки перша стрінга зчитуватиметься джаваскріптом як число,
а відповідно 4-3=1.

'6' + 3 ** 0  в результаті дасть нам стрінгу '61', оскільки ** є оператором піднесення до степеня, 
в даному випадку число 3 є базовим, тим яке підноситься до степеня 0, а будь-яке число у разі піднесення до
нульового степеня у джаваскріпт завжди дорівнює 1.
Далі відбувається конкатинація стрінги '6' з отриманою вище одиницею і відповідно маємо стрінгове значення '61". 

12 / '6'   в результаті матимемо 2, бо джаваскріпт перетворить стрінгове значення '6' у реальне число і далі
виконається звичайна математична операція ділення 12:6=2.

'10' + (5 === 6)  в результаті буде повертатися стрінгове значення "10false", оскільки 5 строго не дорівнює 6 
і тому маємо FALSE і далі цей результат конкатинуватиметься зі стрінгою '10' і даватиме "10false".

null == ''  в результаті дасть TRUE, оскільки позначення == є оператором вільної рівності і в даній операції спочатку 
виконається приведення типів. Оскільки null приблизно дорівнює порожній стрінзі '' (вони обидва читаються як false values),
а отже false по співвідношенню до false вважається TRUE.

3 ** (9 / 3)   в результаті матимемо 27, оскільки спочатку виконується математична операція ділення в дужках, в результаті якої
отримуємо число 3, а далі оператор ** підносить 3 до степеню 3, тобто перемножуємо 3 на 3 і потім ще раз на 3.

!!'false' == !!'true'   в результаті буде TRUE, оскільки подвійне заперечення !! приводить стрінгу 'false' 
до ЇЇ логічного еквівалента, тобто до 'true', а стрінгу 'true' призводить до 'true'. 
Оператором вільної рівності == між двома true-значеннями трактується як TRUE.

0 || '0' && 1   в результаті дає 1, тому що 0 || '0' дає нам 0 (бо оператор || повертає перший правдивий операнд і 
у цьому випадку '0' є true). Далі '0' && 1 дасть нам 1, бо у випадку, коли обидва операнда правдиві оператор &&
повертає нам значення другого операнда, тобто у нашому випадку це 1.

(+null == false) < 1    в результаті дає TRUE, тому що використовується оператор вільної рівності == 
і частина (+null == false) даватиме TRUE. Унарний оператор + перед null перетворює його на 0,
а в свою чергу 0 набуває значення false під час нестрогої перевірки рівності.
Далі ми порівнюємо, що результат з дужок true (в числовому еквіваленті true це умовно є 1) і є < 1
і в даному контексті це TRUE. 

false && true || true  в результаті дасть нам TRUE, бо false && true трактуватиметься як false, 
оскільки оператор && повертає true лише коли обидва операнди є true, а у нас перший операнд є false, тому результат false.
Далі співставляємо false || true і отримуємо true, оскільки оператор || повертає перший правдивий операнд 
і у нашому випадку це true, тому загальний результат рівняння буде TRUE.

false && (false || true)  в результаті дасть нам FALSE, оскільки спочатку результатом виразу в дужках 
матимемо true (бо оператор || повертає перший правдивий операнд і у нашому випадку це true), а далі вираз поза дужками 
співсталяється із нашим результатом у дужках і це дає нам false (оскільки оператор && повертає true лише коли обидва операнди є true),
тому загальний кінцевий результат буде FALSE.

(+null == false) < 1 ** 5    в результаті отримаємо TRUE, оскільки +null перетворює null на 0,
0 == false по суті є true, бо ці значення прирівнюються одне до одного, тому сам вираз трактуємо як true, 
ну і далі порівнюємо, що true (яке в числовому варіанті рівне 1) є менше ніж 1 ** 5 і це порівняння є TRUE.





